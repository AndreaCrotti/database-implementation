EXERCISE 4
#+SETUPFILE: group.org

* DONE EXERCISE 4
   DEADLINE: <2009-11-18 Mer> CLOSED: [2009-11-18 Mer 11:40]
  
* 1. Concurrency Control in B_{+}Trees
** 1. Search the data entry 35*
   For searching we only need to go deeper in the tree, read lock child and unlock parent iteratively.
   So we:
   - rl A
   - rl B
   - ru A
   - rl C
   - ru B
   - rl I
   - ru C
   - r I
   - ru I

** 2. Search for all data entries k* with k* < 35
   For convenience of typing when we write:
   /<op> <obj1> <obj2>/ ... means the we can apply the operator in parallel, then equivalent to /op(obj1), op(obj2)... /

   Here we need to read all the data from the left sibling and left child of node B.
   - rl A
   - rl B, J
   - ru A
   - rl F, K, L
   - ru B, J
   - rl M, N, O, P, G, H
   - ru F, K, L
   - r M, N, O, P, G, H
   - ru M, N, O, P, G, H
   
#<<1.3>>
** 3. Insert data entry 60*
   Here we see that E is not full, so we can just insert our node there.
   But we don't know if the node is actually safe until we reach the end and see it's half empty.

   - wl A
   - wl B => B is safe,
   - wu A
   - wl C
   - wl E  => E is safe, so:
   - wu C 
   - wu B
   - write 60* in E
   - wu E

** 4. Delete data entry 20*
   - wl A
   - wl B 
   - wl F 
   - wl G => G is safe, as it contains more than k*/2 values (k* is obviously = 2)
# here better write sequentially, unlocking can't be parallelised in this case
# before doing the operation on the leaf and only then releasing the parents
   - wu F
   - wu B
   - wu A
   - delete 20* from G
   - wu G

** 5. Insert data entries 60* and 75*
*** Insert 60* 
    See [[1.3]]

*** now insert 75*
    - wl A
    - wl B, B is safe =>
    - wu A
    - wl C
    - wl E
    - insert 75* in E => overflow
    - split E into E1 {44*,60*} and E2 {75*}. propagate insert to C
    - insert 75* in C => overflow
    - split C into C1 {38,44} and C2 {75}. propagate insert to B
    - insert 75 into B
    - wu B, C1, C2, E1, E2

* 2. Multiple-Granularity Locking
** 1. Read record P1200 : 5.
 - irl (D)
 - irl (F2)
 - irl (P1200)
 - rl (P1200:5)
   
** 2. Read records P1200 : 98 through P1205 : 2.
 - irl (D)
 - irl (F2)
 - irl (P1200)
 - rl (P1201 - P1204)
 - irl (P1205)
# FIXED: here it was locking too much
 - rl (P1200:98-100)
 - rl (P1205:1-2)
   
** 3. Read all (records on all) pages in file F1.
   - irl (D)
   - rl (F1)

** 4. Read pages P500 through P520.
   - irl (D)
   - irl (F1)
   - rl (P500 - P520)

** 5. Read pages P10 through P980.
   - irl (D)
   - irl (F1)
   - rl (P10 - P980)
# FIXED: again too much locking
   
** 6. Read all pages in F1 and (based on the values read) modify 10 pages.
   - riwl (D)
   - riwl (F1)
# not sure here, in theory we should I think read lock before, unlock and then lock those pages
   - rl(P1 - P1000)
   - ru(P1 - P1000)
# now I have the value and can decide what to lock
   - wl on that 10 pages

** 7. Delete record P1200 : 98. (This is a blind write.)
   - iwl (D)
   - iwl (F2)
   - iwl (P1200)
   - wl (P1200:98)

** 8. Delete the first record from each page. (Again, these are blind writes.)
   - wl (D) => As there a lot of pages, creating a wl for every single one would cause a lot of overhead! 
    
   In case thats not a problem, we could also use:
   - iwl (D)
   - iwl (F1)
   - iwl (F2)
   - iwl on all pages
   - wl on the first record of each page


** 9. Delete all records.
   - wl (D)
