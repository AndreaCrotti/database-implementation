* Serializability
** Semantics of a schedule
   Is computed using the Herbrand semantics.

** Final State Serializability
   Let $s$ and $s'$ be schedules, they are called *finite-state equivalent* if
   $op(s) = op(s')$ and $H[s] = H[s']$ are valid.
   Therefore $s \equiv s'$

   We can't determine it by simply the last state but also by previous write operations.
   
   *Read from* relation is given when $p \rightarrow q$, so the action p is read in q.
   An action p is /directly useful/ ($p \rightarrow q$) if q is read from p or p is read and q consecutive write action.
   
   Action is *alive* if it's useful for some other actions in the future.
   
   *Live-reads-from* relation 

   FSR is the class of all /finite-state-serializable/ schedules.
   But the test for inclusion in FSR has *exponential complexity*.

*** TODO Try to implement the Herbrand semantic
   
** Conflicts
   Two operators are in *conflict* if they operate on the same object and at least one is a write.
   
   $s$ and $s'$ are *conflict equivalent* if
   - $op(s) = op(s')$
   - $conf(s) = conf(s')$
   
   /Conflict serializable/ if a serial schedule exists with equivalent serializability.


*** Serializability theorem:
   It holds
   $CSR \subset VSR \subset FSR$
   We can then build a simple conflict graph and say that.
   $s \in CSR \leftrightarrow G(s)$ is acyclic
   
   So we can check in polynomial time the conflict serializability.

*** Order preserving conflict serializability
    We can impose constraints on CSR imposing that some actions must be executed later.
    An /ordering/ of the conflict order is sufficient for /conflict serializability/.
		    


* Transaction recovery
  Serializability does not avoid synchronization problems between processes.
  Recovery properties are orthogonal to serializability.

  Under which conditions a schedule allows a *correct recovery of transactions*?

** Recoverability
  Every transaction will not be released, until all the other transactions from which it has read, are released
  RC is the class of all recoverable schedules.
  
  In other words we can say that if we read from another transaction we must make sure that the other transction does the commit before us.

** Avoidance of cascading aborts
   A transaction is only allowed to read values from already successfully completed transactions.

** Strictness
   A schedule is strict, if an object is not read or overwritten, until the transction, which has written it at last, is terminated.

** Rigorous schedules
   A schedule is rigorous, if it is strict and no object x is overwritten, until all transactions, which have read x at last, are terminated

* Concurrency Control Protocols
  Techiques thanks to which the DBMS can generate correct schedules.
  They can use locking mechanism or not.

  We must consider
  - Safety
  - expressiveness
  
  
** Locking scheduler
   Applied for synchronization of accesses on same data objects.
   For a schedule s a DT(s) it the projection of s on the actions of type "a,c,r,w".
   (removing the locking and unlocking operations).
   
   
   - rl(x) read lock
   - wl(x) write lock
     
*** Two phase locking (2PL)
    A locking protocol is /two phase/ if:
    After the first unlocking operation, locking can't be set anymore.
    In the first phase of the transaction locks will only be set, in the second phase will only be removed.
    
    - easy to implement
    - good performances
    - easy to distribute
    - *not* deadlock free
    - transactions may starve!
    
*** MGL
    We need *intentional locks*.
    The idea is for a transaction to indicate, along the path, what locks will require in some of the possible paths.
    - irl:
      a read lock will be requested
    - iwl:
      a write lock will be requested
    - riwl:
      current node is read locked but also a write lock will be requested later.
